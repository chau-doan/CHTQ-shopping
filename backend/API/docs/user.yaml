components:
  schemas:
    UserSignin:
      type: object
      properties:
        email:
          type: string
          required: true
          description: The user's email
        password:
          type: string
          required: true
          description: The user's password
      example:
        email: "user@example.com"
        password: "5678"
    UserRegister:
      type: object
      properties:
        name:
          type: string
          required: true
          description: The user's name
        email:
          type: string
          required: true
          description: The user's email
        password:
          type: string
          required: true
          description: The user's password
      example:
        name: "John"
        email: "user@example.com"
        password: "5678"
    UserResponse:
      type: object
      properties:
        _id:
          type: string
          description: The user ID generated by Mongoose
        name:
          type: string
          description: The user's name
        email:
          type: string
          description: The user's email
        isAdmin:
          type: boolean
          description: Indicate if user is admin or not
        token:
          type: string
          description: An token session expired in 30 days used for request authorization
      example:
        _id: "61d830bbb91f4977aac56301"
        name: "John"
        email: "user@example.com"
        isAdmin: false
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWQ4MzBiYmI5MWY0OTc3YWFjNTYzMDEiLCJuYW1lIjoiSm9obiIsImVtYWlsIjoidXNlckBleGFtcGxlLmNvbSIsImlzQWRtaW4iOmZhbHNlLCJpYXQiOjE2NDY4MzA4OTcsImV4cCI6MTY0OTQyMjg5N30.Bf9ZytSNHmVAvZUuukQd-dPv662E-ZTUyj3Y2GavCf8"
    UserInformation:
      type: object
      properties:
        _id:
          type: string
          description: The user ID generated by Mongoose
        name:
          type: string
          description: The user's name
        email:
          type: string
          description: The user's email
        isAdmin:
          type: boolean
          description: Indicate if user is admin or not
        createdAt:
          type: string
          description: Day and time an account created
        updatedAt:
          type: string
          description: Day and time an account last updated
        example:
          _id: "61d830bbb91f4977aac56301"
          name: "John"
          email: "user@example.com"
          isAdmin: false
          createdAt: "2022-01-07T12:23:23.525Z"
          updatedAt: "2022-01-07T12:23:23.525Z"
  parameters:
    user_id:
      name: id
      in: path
      description: An user ID use to find document in database
      schema:
        type: string


      
      
paths:
  /api/users/{id}:
    get:
      summary: Get user information by their ID
      tags:
        - User
      description: Allow admin to get information of other user who exist on database. Normal user can only get their information but not other person information.
      parameters:
        - $ref: '#/components/parameters/Header'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInformation'
        400:
          $ref: '#/components/responses/UnauthorizedRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update user (ADMIN)
      tags:
        - User
      description: Route use by admin to update user status with their id listed in the query.
      parameters:
        - $ref: '#/components/parameters/Header'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/UnauthorizedRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete user (ADMIN)
      tags:
        - User
      description: Route use by admin to delete a user with their id listed in the query.
      parameters:
        - $ref: '#/components/parameters/Header'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/UnauthorizedRequest'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /api/users:
    get:
      summary: User list (ADMIN)
      tags:
        - User
      description: Get a list of all user exist in database (Admin)
      parameters:
        - $ref: '#/components/parameters/Header'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    description: Current page number
                  pages:
                    type: integer
                    description: Total pages number
                  users:
                    type: array
                    description: Array contain list of user information
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The user ID generated by Mongoose
                      name:
                        type: string
                        description: The user's name
                      email:
                        type: string
                        description: The user's email
                      isAdmin:
                        type: boolean
                        description: Indicate if user is admin or not
                      createdAt:
                        type: string
                        description: Day and time an account created
                      updatedAt:
                        type: string
                        description: Day and time an account last updated
                example:
                  page: 1
                  pages: 1
                  users:
                  _id: "61d830bbb91f4977aac56301"
                  name: "John"
                  email: "user@example.com"
                  isAdmin: false
                  createdAt: "2022-01-07T12:23:23.525Z"
                  updatedAt: "2022-01-07T12:23:23.525Z"
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /api/users/signin:
    post:
      sumary: USer Sign In
      tags:
        - User
      description: Verify user email and password
      requestBody:
        required: true
        description: Mandatory to sign in to user account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignin'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Fail to Sign In
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Invalid email or password'

  /api/users/register:
    post:
      summary: User Register
      tags:
        - User
      description: User request to create account
      requestBody:
        required: true
        description: Mandatory to sign in to user account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        500:
          $ref: '#/components/responses/Duplicated'

  /api/users/profile:
    put:
      summary: Update information
      tags:
        - User
      description: User making request to update their information
      parameters:
        - $ref: '#/components/parameters/Header'
      requestBody:
        required: true
        description: Mandatory to sign in to user account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'